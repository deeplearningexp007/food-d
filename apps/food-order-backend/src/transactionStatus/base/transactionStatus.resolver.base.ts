/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TransactionStatus } from "./TransactionStatus";
import { TransactionStatusCountArgs } from "./TransactionStatusCountArgs";
import { TransactionStatusFindManyArgs } from "./TransactionStatusFindManyArgs";
import { TransactionStatusFindUniqueArgs } from "./TransactionStatusFindUniqueArgs";
import { CreateTransactionStatusArgs } from "./CreateTransactionStatusArgs";
import { UpdateTransactionStatusArgs } from "./UpdateTransactionStatusArgs";
import { DeleteTransactionStatusArgs } from "./DeleteTransactionStatusArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionStatusService } from "../transactionStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TransactionStatus)
export class TransactionStatusResolverBase {
  constructor(
    protected readonly service: TransactionStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TransactionStatus",
    action: "read",
    possession: "any",
  })
  async _transactionStatusesMeta(
    @graphql.Args() args: TransactionStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TransactionStatus])
  @nestAccessControl.UseRoles({
    resource: "TransactionStatus",
    action: "read",
    possession: "any",
  })
  async transactionStatuses(
    @graphql.Args() args: TransactionStatusFindManyArgs
  ): Promise<TransactionStatus[]> {
    return this.service.transactionStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TransactionStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TransactionStatus",
    action: "read",
    possession: "own",
  })
  async transactionStatus(
    @graphql.Args() args: TransactionStatusFindUniqueArgs
  ): Promise<TransactionStatus | null> {
    const result = await this.service.transactionStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionStatus)
  @nestAccessControl.UseRoles({
    resource: "TransactionStatus",
    action: "create",
    possession: "any",
  })
  async createTransactionStatus(
    @graphql.Args() args: CreateTransactionStatusArgs
  ): Promise<TransactionStatus> {
    return await this.service.createTransactionStatus({
      ...args,
      data: {
        ...args.data,

        transactions: args.data.transactions
          ? {
              connect: args.data.transactions,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionStatus)
  @nestAccessControl.UseRoles({
    resource: "TransactionStatus",
    action: "update",
    possession: "any",
  })
  async updateTransactionStatus(
    @graphql.Args() args: UpdateTransactionStatusArgs
  ): Promise<TransactionStatus | null> {
    try {
      return await this.service.updateTransactionStatus({
        ...args,
        data: {
          ...args.data,

          transactions: args.data.transactions
            ? {
                connect: args.data.transactions,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TransactionStatus)
  @nestAccessControl.UseRoles({
    resource: "TransactionStatus",
    action: "delete",
    possession: "any",
  })
  async deleteTransactionStatus(
    @graphql.Args() args: DeleteTransactionStatusArgs
  ): Promise<TransactionStatus | null> {
    try {
      return await this.service.deleteTransactionStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Transaction, {
    nullable: true,
    name: "transactions",
  })
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async getTransactions(
    @graphql.Parent() parent: TransactionStatus
  ): Promise<Transaction | null> {
    const result = await this.service.getTransactions(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
