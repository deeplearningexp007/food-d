/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MenuItem, // @ts-ignore
  FavoriteMenuItem, // @ts-ignore
  MenuItemCategory, // @ts-ignore
  OrderItem, // @ts-ignore
  Menu,
} from "@prisma/client";

export class MenuItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MenuItemCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemCountArgs>
  ): Promise<number> {
    return this.prisma.menuItem.count(args);
  }

  async menuItems<T extends Prisma.MenuItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemFindManyArgs>
  ): Promise<MenuItem[]> {
    return this.prisma.menuItem.findMany(args);
  }
  async menuItem<T extends Prisma.MenuItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemFindUniqueArgs>
  ): Promise<MenuItem | null> {
    return this.prisma.menuItem.findUnique(args);
  }
  async createMenuItem<T extends Prisma.MenuItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemCreateArgs>
  ): Promise<MenuItem> {
    return this.prisma.menuItem.create<T>(args);
  }
  async updateMenuItem<T extends Prisma.MenuItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemUpdateArgs>
  ): Promise<MenuItem> {
    return this.prisma.menuItem.update<T>(args);
  }
  async deleteMenuItem<T extends Prisma.MenuItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemDeleteArgs>
  ): Promise<MenuItem> {
    return this.prisma.menuItem.delete(args);
  }

  async findFavoriteMenuItems(
    parentId: number,
    args: Prisma.FavoriteMenuItemFindManyArgs
  ): Promise<FavoriteMenuItem[]> {
    return this.prisma.menuItem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .favoriteMenuItems(args);
  }

  async findMenuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems(
    parentId: number,
    args: Prisma.MenuItemCategoryFindManyArgs
  ): Promise<MenuItemCategory[]> {
    return this.prisma.menuItem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .menuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems(args);
  }

  async findOrderItems(
    parentId: number,
    args: Prisma.OrderItemFindManyArgs
  ): Promise<OrderItem[]> {
    return this.prisma.menuItem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orderItems(args);
  }

  async getMenuItemCategoriesMenuItemsCategoryIdToMenuItemCategories(
    parentId: number
  ): Promise<MenuItemCategory | null> {
    return this.prisma.menuItem
      .findUnique({
        where: { id: parentId },
      })
      .menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories();
  }

  async getMenus(parentId: number): Promise<Menu | null> {
    return this.prisma.menuItem
      .findUnique({
        where: { id: parentId },
      })
      .menus();
  }
}
