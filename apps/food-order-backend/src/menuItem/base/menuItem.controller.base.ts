/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MenuItemService } from "../menuItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MenuItemCreateInput } from "./MenuItemCreateInput";
import { MenuItem } from "./MenuItem";
import { MenuItemFindManyArgs } from "./MenuItemFindManyArgs";
import { MenuItemWhereUniqueInput } from "./MenuItemWhereUniqueInput";
import { MenuItemUpdateInput } from "./MenuItemUpdateInput";
import { FavoriteMenuItemFindManyArgs } from "../../favoriteMenuItem/base/FavoriteMenuItemFindManyArgs";
import { FavoriteMenuItem } from "../../favoriteMenuItem/base/FavoriteMenuItem";
import { FavoriteMenuItemWhereUniqueInput } from "../../favoriteMenuItem/base/FavoriteMenuItemWhereUniqueInput";
import { MenuItemCategoryFindManyArgs } from "../../menuItemCategory/base/MenuItemCategoryFindManyArgs";
import { MenuItemCategory } from "../../menuItemCategory/base/MenuItemCategory";
import { MenuItemCategoryWhereUniqueInput } from "../../menuItemCategory/base/MenuItemCategoryWhereUniqueInput";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrderItemWhereUniqueInput } from "../../orderItem/base/OrderItemWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MenuItemControllerBase {
  constructor(
    protected readonly service: MenuItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MenuItem })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMenuItem(
    @common.Body() data: MenuItemCreateInput
  ): Promise<MenuItem> {
    return await this.service.createMenuItem({
      data: {
        ...data,

        menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories:
          data.menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories
            ? {
                connect:
                  data.menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories,
              }
            : undefined,

        menus: data.menus
          ? {
              connect: data.menus,
            }
          : undefined,
      },
      select: {
        availableQuantity: true,
        description: true,
        hashtags: true,
        id: true,
        imageUrl: true,
        ingredients: true,
        isActive: true,
        isVegetarian: true,

        menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories: {
          select: {
            id: true,
          },
        },

        menus: {
          select: {
            id: true,
          },
        },

        name: true,
        preparationTime: true,
        price: true,
        shareSlug: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MenuItem] })
  @ApiNestedQuery(MenuItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuItems(@common.Req() request: Request): Promise<MenuItem[]> {
    const args = plainToClass(MenuItemFindManyArgs, request.query);
    return this.service.menuItems({
      ...args,
      select: {
        availableQuantity: true,
        description: true,
        hashtags: true,
        id: true,
        imageUrl: true,
        ingredients: true,
        isActive: true,
        isVegetarian: true,

        menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories: {
          select: {
            id: true,
          },
        },

        menus: {
          select: {
            id: true,
          },
        },

        name: true,
        preparationTime: true,
        price: true,
        shareSlug: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MenuItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuItem(
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<MenuItem | null> {
    const result = await this.service.menuItem({
      where: params,
      select: {
        availableQuantity: true,
        description: true,
        hashtags: true,
        id: true,
        imageUrl: true,
        ingredients: true,
        isActive: true,
        isVegetarian: true,

        menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories: {
          select: {
            id: true,
          },
        },

        menus: {
          select: {
            id: true,
          },
        },

        name: true,
        preparationTime: true,
        price: true,
        shareSlug: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MenuItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMenuItem(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() data: MenuItemUpdateInput
  ): Promise<MenuItem | null> {
    try {
      return await this.service.updateMenuItem({
        where: params,
        data: {
          ...data,

          menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories:
            data.menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories
              ? {
                  connect:
                    data.menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories,
                }
              : undefined,

          menus: data.menus
            ? {
                connect: data.menus,
              }
            : undefined,
        },
        select: {
          availableQuantity: true,
          description: true,
          hashtags: true,
          id: true,
          imageUrl: true,
          ingredients: true,
          isActive: true,
          isVegetarian: true,

          menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories: {
            select: {
              id: true,
            },
          },

          menus: {
            select: {
              id: true,
            },
          },

          name: true,
          preparationTime: true,
          price: true,
          shareSlug: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MenuItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMenuItem(
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<MenuItem | null> {
    try {
      return await this.service.deleteMenuItem({
        where: params,
        select: {
          availableQuantity: true,
          description: true,
          hashtags: true,
          id: true,
          imageUrl: true,
          ingredients: true,
          isActive: true,
          isVegetarian: true,

          menuItemCategoriesMenuItemsCategoryIdToMenuItemCategories: {
            select: {
              id: true,
            },
          },

          menus: {
            select: {
              id: true,
            },
          },

          name: true,
          preparationTime: true,
          price: true,
          shareSlug: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/favoriteMenuItems")
  @ApiNestedQuery(FavoriteMenuItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FavoriteMenuItem",
    action: "read",
    possession: "any",
  })
  async findFavoriteMenuItems(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<FavoriteMenuItem[]> {
    const query = plainToClass(FavoriteMenuItemFindManyArgs, request.query);
    const results = await this.service.findFavoriteMenuItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        favorites: {
          select: {
            id: true,
          },
        },

        id: true,

        menuItems: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/favoriteMenuItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectFavoriteMenuItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: FavoriteMenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteMenuItems: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/favoriteMenuItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateFavoriteMenuItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: FavoriteMenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteMenuItems: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/favoriteMenuItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectFavoriteMenuItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: FavoriteMenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteMenuItems: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems")
  @ApiNestedQuery(MenuItemCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItemCategory",
    action: "read",
    possession: "any",
  })
  async findMenuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<MenuItemCategory[]> {
    const query = plainToClass(MenuItemCategoryFindManyArgs, request.query);
    const results =
      await this.service.findMenuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems(
        params.id,
        {
          ...query,
          select: {
            id: true,

            menuItemsMenuItemCategoriesMenuItemIdToMenuItems: {
              select: {
                id: true,
              },
            },

            name: true,
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectMenuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch(
    "/:id/menuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems"
  )
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateMenuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete(
    "/:id/menuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems"
  )
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectMenuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemCategoriesMenuItemCategoriesMenuItemIdToMenuItems: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderItems")
  @ApiNestedQuery(OrderItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderItem",
    action: "read",
    possession: "any",
  })
  async findOrderItems(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<OrderItem[]> {
    const query = plainToClass(OrderItemFindManyArgs, request.query);
    const results = await this.service.findOrderItems(params.id, {
      ...query,
      select: {
        customizationOptions: true,
        id: true,
        itemDescription: true,
        itemImage: true,
        itemName: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        orders: {
          select: {
            id: true,
          },
        },

        price: true,
        quantity: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectOrderItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateOrderItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectOrderItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
