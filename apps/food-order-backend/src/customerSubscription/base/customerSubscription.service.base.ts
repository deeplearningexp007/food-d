/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerSubscription, // @ts-ignore
  SubscriptionPlan, // @ts-ignore
  Subscription, // @ts-ignore
  UserModel,
} from "@prisma/client";

export class CustomerSubscriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CustomerSubscriptionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionCountArgs>
  ): Promise<number> {
    return this.prisma.customerSubscription.count(args);
  }

  async customerSubscriptions<
    T extends Prisma.CustomerSubscriptionFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionFindManyArgs>
  ): Promise<CustomerSubscription[]> {
    return this.prisma.customerSubscription.findMany(args);
  }
  async customerSubscription<
    T extends Prisma.CustomerSubscriptionFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionFindUniqueArgs>
  ): Promise<CustomerSubscription | null> {
    return this.prisma.customerSubscription.findUnique(args);
  }
  async createCustomerSubscription<
    T extends Prisma.CustomerSubscriptionCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionCreateArgs>
  ): Promise<CustomerSubscription> {
    return this.prisma.customerSubscription.create<T>(args);
  }
  async updateCustomerSubscription<
    T extends Prisma.CustomerSubscriptionUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionUpdateArgs>
  ): Promise<CustomerSubscription> {
    return this.prisma.customerSubscription.update<T>(args);
  }
  async deleteCustomerSubscription<
    T extends Prisma.CustomerSubscriptionDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionDeleteArgs>
  ): Promise<CustomerSubscription> {
    return this.prisma.customerSubscription.delete(args);
  }

  async getSubscriptionPlans(
    parentId: number
  ): Promise<SubscriptionPlan | null> {
    return this.prisma.customerSubscription
      .findUnique({
        where: { id: parentId },
      })
      .subscriptionPlans();
  }

  async getSubscriptions(parentId: number): Promise<Subscription | null> {
    return this.prisma.customerSubscription
      .findUnique({
        where: { id: parentId },
      })
      .subscriptions();
  }

  async getUserModels(parentId: number): Promise<UserModel | null> {
    return this.prisma.customerSubscription
      .findUnique({
        where: { id: parentId },
      })
      .userModels();
  }
}
