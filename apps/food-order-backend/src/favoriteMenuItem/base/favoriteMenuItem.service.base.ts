/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FavoriteMenuItem, // @ts-ignore
  Favorite, // @ts-ignore
  MenuItem,
} from "@prisma/client";

export class FavoriteMenuItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.FavoriteMenuItemCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteMenuItemCountArgs>
  ): Promise<number> {
    return this.prisma.favoriteMenuItem.count(args);
  }

  async favoriteMenuItems<T extends Prisma.FavoriteMenuItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteMenuItemFindManyArgs>
  ): Promise<FavoriteMenuItem[]> {
    return this.prisma.favoriteMenuItem.findMany(args);
  }
  async favoriteMenuItem<T extends Prisma.FavoriteMenuItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteMenuItemFindUniqueArgs>
  ): Promise<FavoriteMenuItem | null> {
    return this.prisma.favoriteMenuItem.findUnique(args);
  }
  async createFavoriteMenuItem<T extends Prisma.FavoriteMenuItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteMenuItemCreateArgs>
  ): Promise<FavoriteMenuItem> {
    return this.prisma.favoriteMenuItem.create<T>(args);
  }
  async updateFavoriteMenuItem<T extends Prisma.FavoriteMenuItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteMenuItemUpdateArgs>
  ): Promise<FavoriteMenuItem> {
    return this.prisma.favoriteMenuItem.update<T>(args);
  }
  async deleteFavoriteMenuItem<T extends Prisma.FavoriteMenuItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteMenuItemDeleteArgs>
  ): Promise<FavoriteMenuItem> {
    return this.prisma.favoriteMenuItem.delete(args);
  }

  async getFavorites(parentId: number): Promise<Favorite | null> {
    return this.prisma.favoriteMenuItem
      .findUnique({
        where: { id: parentId },
      })
      .favorites();
  }

  async getMenuItems(parentId: number): Promise<MenuItem | null> {
    return this.prisma.favoriteMenuItem
      .findUnique({
        where: { id: parentId },
      })
      .menuItems();
  }
}
