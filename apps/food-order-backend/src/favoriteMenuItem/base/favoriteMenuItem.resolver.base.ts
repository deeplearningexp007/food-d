/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FavoriteMenuItem } from "./FavoriteMenuItem";
import { FavoriteMenuItemCountArgs } from "./FavoriteMenuItemCountArgs";
import { FavoriteMenuItemFindManyArgs } from "./FavoriteMenuItemFindManyArgs";
import { FavoriteMenuItemFindUniqueArgs } from "./FavoriteMenuItemFindUniqueArgs";
import { CreateFavoriteMenuItemArgs } from "./CreateFavoriteMenuItemArgs";
import { UpdateFavoriteMenuItemArgs } from "./UpdateFavoriteMenuItemArgs";
import { DeleteFavoriteMenuItemArgs } from "./DeleteFavoriteMenuItemArgs";
import { Favorite } from "../../favorite/base/Favorite";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { FavoriteMenuItemService } from "../favoriteMenuItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FavoriteMenuItem)
export class FavoriteMenuItemResolverBase {
  constructor(
    protected readonly service: FavoriteMenuItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FavoriteMenuItem",
    action: "read",
    possession: "any",
  })
  async _favoriteMenuItemsMeta(
    @graphql.Args() args: FavoriteMenuItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FavoriteMenuItem])
  @nestAccessControl.UseRoles({
    resource: "FavoriteMenuItem",
    action: "read",
    possession: "any",
  })
  async favoriteMenuItems(
    @graphql.Args() args: FavoriteMenuItemFindManyArgs
  ): Promise<FavoriteMenuItem[]> {
    return this.service.favoriteMenuItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FavoriteMenuItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FavoriteMenuItem",
    action: "read",
    possession: "own",
  })
  async favoriteMenuItem(
    @graphql.Args() args: FavoriteMenuItemFindUniqueArgs
  ): Promise<FavoriteMenuItem | null> {
    const result = await this.service.favoriteMenuItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FavoriteMenuItem)
  @nestAccessControl.UseRoles({
    resource: "FavoriteMenuItem",
    action: "create",
    possession: "any",
  })
  async createFavoriteMenuItem(
    @graphql.Args() args: CreateFavoriteMenuItemArgs
  ): Promise<FavoriteMenuItem> {
    return await this.service.createFavoriteMenuItem({
      ...args,
      data: {
        ...args.data,

        favorites: args.data.favorites
          ? {
              connect: args.data.favorites,
            }
          : undefined,

        menuItems: args.data.menuItems
          ? {
              connect: args.data.menuItems,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FavoriteMenuItem)
  @nestAccessControl.UseRoles({
    resource: "FavoriteMenuItem",
    action: "update",
    possession: "any",
  })
  async updateFavoriteMenuItem(
    @graphql.Args() args: UpdateFavoriteMenuItemArgs
  ): Promise<FavoriteMenuItem | null> {
    try {
      return await this.service.updateFavoriteMenuItem({
        ...args,
        data: {
          ...args.data,

          favorites: args.data.favorites
            ? {
                connect: args.data.favorites,
              }
            : undefined,

          menuItems: args.data.menuItems
            ? {
                connect: args.data.menuItems,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FavoriteMenuItem)
  @nestAccessControl.UseRoles({
    resource: "FavoriteMenuItem",
    action: "delete",
    possession: "any",
  })
  async deleteFavoriteMenuItem(
    @graphql.Args() args: DeleteFavoriteMenuItemArgs
  ): Promise<FavoriteMenuItem | null> {
    try {
      return await this.service.deleteFavoriteMenuItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Favorite, {
    nullable: true,
    name: "favorites",
  })
  @nestAccessControl.UseRoles({
    resource: "Favorite",
    action: "read",
    possession: "any",
  })
  async getFavorites(
    @graphql.Parent() parent: FavoriteMenuItem
  ): Promise<Favorite | null> {
    const result = await this.service.getFavorites(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuItem, {
    nullable: true,
    name: "menuItems",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async getMenuItems(
    @graphql.Parent() parent: FavoriteMenuItem
  ): Promise<MenuItem | null> {
    const result = await this.service.getMenuItems(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
