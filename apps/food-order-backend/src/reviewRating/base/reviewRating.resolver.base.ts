/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ReviewRating } from "./ReviewRating";
import { ReviewRatingCountArgs } from "./ReviewRatingCountArgs";
import { ReviewRatingFindManyArgs } from "./ReviewRatingFindManyArgs";
import { ReviewRatingFindUniqueArgs } from "./ReviewRatingFindUniqueArgs";
import { CreateReviewRatingArgs } from "./CreateReviewRatingArgs";
import { UpdateReviewRatingArgs } from "./UpdateReviewRatingArgs";
import { DeleteReviewRatingArgs } from "./DeleteReviewRatingArgs";
import { Review } from "../../review/base/Review";
import { ReviewRatingService } from "../reviewRating.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReviewRating)
export class ReviewRatingResolverBase {
  constructor(
    protected readonly service: ReviewRatingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReviewRating",
    action: "read",
    possession: "any",
  })
  async _reviewRatingsMeta(
    @graphql.Args() args: ReviewRatingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReviewRating])
  @nestAccessControl.UseRoles({
    resource: "ReviewRating",
    action: "read",
    possession: "any",
  })
  async reviewRatings(
    @graphql.Args() args: ReviewRatingFindManyArgs
  ): Promise<ReviewRating[]> {
    return this.service.reviewRatings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReviewRating, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReviewRating",
    action: "read",
    possession: "own",
  })
  async reviewRating(
    @graphql.Args() args: ReviewRatingFindUniqueArgs
  ): Promise<ReviewRating | null> {
    const result = await this.service.reviewRating(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewRating)
  @nestAccessControl.UseRoles({
    resource: "ReviewRating",
    action: "create",
    possession: "any",
  })
  async createReviewRating(
    @graphql.Args() args: CreateReviewRatingArgs
  ): Promise<ReviewRating> {
    return await this.service.createReviewRating({
      ...args,
      data: {
        ...args.data,

        reviews: args.data.reviews
          ? {
              connect: args.data.reviews,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewRating)
  @nestAccessControl.UseRoles({
    resource: "ReviewRating",
    action: "update",
    possession: "any",
  })
  async updateReviewRating(
    @graphql.Args() args: UpdateReviewRatingArgs
  ): Promise<ReviewRating | null> {
    try {
      return await this.service.updateReviewRating({
        ...args,
        data: {
          ...args.data,

          reviews: args.data.reviews
            ? {
                connect: args.data.reviews,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewRating)
  @nestAccessControl.UseRoles({
    resource: "ReviewRating",
    action: "delete",
    possession: "any",
  })
  async deleteReviewRating(
    @graphql.Args() args: DeleteReviewRatingArgs
  ): Promise<ReviewRating | null> {
    try {
      return await this.service.deleteReviewRating(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Review, {
    nullable: true,
    name: "reviews",
  })
  @nestAccessControl.UseRoles({
    resource: "Review",
    action: "read",
    possession: "any",
  })
  async getReviews(
    @graphql.Parent() parent: ReviewRating
  ): Promise<Review | null> {
    const result = await this.service.getReviews(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
