/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ReviewRating, // @ts-ignore
  Review,
} from "@prisma/client";

export class ReviewRatingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ReviewRatingCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewRatingCountArgs>
  ): Promise<number> {
    return this.prisma.reviewRating.count(args);
  }

  async reviewRatings<T extends Prisma.ReviewRatingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewRatingFindManyArgs>
  ): Promise<ReviewRating[]> {
    return this.prisma.reviewRating.findMany(args);
  }
  async reviewRating<T extends Prisma.ReviewRatingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewRatingFindUniqueArgs>
  ): Promise<ReviewRating | null> {
    return this.prisma.reviewRating.findUnique(args);
  }
  async createReviewRating<T extends Prisma.ReviewRatingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewRatingCreateArgs>
  ): Promise<ReviewRating> {
    return this.prisma.reviewRating.create<T>(args);
  }
  async updateReviewRating<T extends Prisma.ReviewRatingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewRatingUpdateArgs>
  ): Promise<ReviewRating> {
    return this.prisma.reviewRating.update<T>(args);
  }
  async deleteReviewRating<T extends Prisma.ReviewRatingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewRatingDeleteArgs>
  ): Promise<ReviewRating> {
    return this.prisma.reviewRating.delete(args);
  }

  async getReviews(parentId: number): Promise<Review | null> {
    return this.prisma.reviewRating
      .findUnique({
        where: { id: parentId },
      })
      .reviews();
  }
}
