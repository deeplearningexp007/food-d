/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FavoriteRestaurant, // @ts-ignore
  Favorite, // @ts-ignore
  Restaurant,
} from "@prisma/client";

export class FavoriteRestaurantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.FavoriteRestaurantCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteRestaurantCountArgs>
  ): Promise<number> {
    return this.prisma.favoriteRestaurant.count(args);
  }

  async favoriteRestaurants<T extends Prisma.FavoriteRestaurantFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteRestaurantFindManyArgs>
  ): Promise<FavoriteRestaurant[]> {
    return this.prisma.favoriteRestaurant.findMany(args);
  }
  async favoriteRestaurant<T extends Prisma.FavoriteRestaurantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteRestaurantFindUniqueArgs>
  ): Promise<FavoriteRestaurant | null> {
    return this.prisma.favoriteRestaurant.findUnique(args);
  }
  async createFavoriteRestaurant<T extends Prisma.FavoriteRestaurantCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteRestaurantCreateArgs>
  ): Promise<FavoriteRestaurant> {
    return this.prisma.favoriteRestaurant.create<T>(args);
  }
  async updateFavoriteRestaurant<T extends Prisma.FavoriteRestaurantUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteRestaurantUpdateArgs>
  ): Promise<FavoriteRestaurant> {
    return this.prisma.favoriteRestaurant.update<T>(args);
  }
  async deleteFavoriteRestaurant<T extends Prisma.FavoriteRestaurantDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavoriteRestaurantDeleteArgs>
  ): Promise<FavoriteRestaurant> {
    return this.prisma.favoriteRestaurant.delete(args);
  }

  async getFavorites(parentId: number): Promise<Favorite | null> {
    return this.prisma.favoriteRestaurant
      .findUnique({
        where: { id: parentId },
      })
      .favorites();
  }

  async getRestaurants(parentId: number): Promise<Restaurant | null> {
    return this.prisma.favoriteRestaurant
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
