/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccessLogCreateNestedManyWithoutUserModelsInput } from "./AccessLogCreateNestedManyWithoutUserModelsInput";
import { ValidateNested, IsOptional, IsString, IsDate } from "class-validator";
import { Type } from "class-transformer";
import { CouponRedemptionCreateNestedManyWithoutUserModelsInput } from "./CouponRedemptionCreateNestedManyWithoutUserModelsInput";
import { CustomerPreferenceCreateNestedManyWithoutUserModelsInput } from "./CustomerPreferenceCreateNestedManyWithoutUserModelsInput";
import { CustomerSubscriptionCreateNestedManyWithoutUserModelsInput } from "./CustomerSubscriptionCreateNestedManyWithoutUserModelsInput";
import { ErrorLogCreateNestedManyWithoutUserModelsInput } from "./ErrorLogCreateNestedManyWithoutUserModelsInput";
import { FavoriteCreateNestedManyWithoutUserModelsInput } from "./FavoriteCreateNestedManyWithoutUserModelsInput";
import { NotificationCreateNestedManyWithoutUserModelsInput } from "./NotificationCreateNestedManyWithoutUserModelsInput";
import { NotificationSettingCreateNestedManyWithoutUserModelsInput } from "./NotificationSettingCreateNestedManyWithoutUserModelsInput";
import { OrderCreateNestedManyWithoutUserModelsInput } from "./OrderCreateNestedManyWithoutUserModelsInput";
import { ReportCreateNestedManyWithoutUserModelsInput } from "./ReportCreateNestedManyWithoutUserModelsInput";
import { ReservationCreateNestedManyWithoutUserModelsInput } from "./ReservationCreateNestedManyWithoutUserModelsInput";
import { ReviewCreateNestedManyWithoutUserModelsInput } from "./ReviewCreateNestedManyWithoutUserModelsInput";
import { RewardCreateNestedManyWithoutUserModelsInput } from "./RewardCreateNestedManyWithoutUserModelsInput";
import { SubscriptionCreateNestedManyWithoutUserModelsInput } from "./SubscriptionCreateNestedManyWithoutUserModelsInput";
import { TransactionCreateNestedManyWithoutUserModelsInput } from "./TransactionCreateNestedManyWithoutUserModelsInput";
import { UserAddressCreateNestedManyWithoutUserModelsInput } from "./UserAddressCreateNestedManyWithoutUserModelsInput";
import { WishlistCreateNestedManyWithoutUserModelsInput } from "./WishlistCreateNestedManyWithoutUserModelsInput";

@InputType()
class UserModelCreateInput {
  @ApiProperty({
    required: false,
    type: () => AccessLogCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => AccessLogCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => AccessLogCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  accessLogs?: AccessLogCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  appleSsoToken?: string | null;

  @ApiProperty({
    required: false,
    type: () => CouponRedemptionCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => CouponRedemptionCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => CouponRedemptionCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  couponRedemptions?: CouponRedemptionCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => CustomerPreferenceCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => CustomerPreferenceCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => CustomerPreferenceCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  customerPreferences?: CustomerPreferenceCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => CustomerSubscriptionCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => CustomerSubscriptionCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => CustomerSubscriptionCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  customerSubscriptions?: CustomerSubscriptionCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  emailPassword!: string;

  @ApiProperty({
    required: false,
    type: () => ErrorLogCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => ErrorLogCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => ErrorLogCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  errorLogs?: ErrorLogCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  facebookSsoToken?: string | null;

  @ApiProperty({
    required: false,
    type: () => FavoriteCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => FavoriteCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => FavoriteCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  favorites?: FavoriteCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  googleSsoToken?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: () => NotificationCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => NotificationCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => NotificationCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  notifications?: NotificationCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => NotificationSettingCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => NotificationSettingCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => NotificationSettingCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  notificationSettings?: NotificationSettingCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => OrderCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => OrderCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => OrderCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  orders?: OrderCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  phoneNumber!: string;

  @ApiProperty({
    required: false,
    type: () => ReportCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => ReportCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => ReportCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  reports?: ReportCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => ReservationCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => ReservationCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => ReservationCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  reservations?: ReservationCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => ReviewCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => ReviewCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => ReviewCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  reviews?: ReviewCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => RewardCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => RewardCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => RewardCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  rewards?: RewardCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => SubscriptionCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => SubscriptionCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => SubscriptionCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  subscriptions?: SubscriptionCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  transactions?: TransactionCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  twitterSsoToken?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => UserAddressCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => UserAddressCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => UserAddressCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  userAddresses?: UserAddressCreateNestedManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => WishlistCreateNestedManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => WishlistCreateNestedManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => WishlistCreateNestedManyWithoutUserModelsInput, {
    nullable: true,
  })
  wishlist?: WishlistCreateNestedManyWithoutUserModelsInput;
}

export { UserModelCreateInput as UserModelCreateInput };
