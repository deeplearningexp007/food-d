/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccessLogUpdateManyWithoutUserModelsInput } from "./AccessLogUpdateManyWithoutUserModelsInput";
import { ValidateNested, IsOptional, IsString, IsDate } from "class-validator";
import { Type } from "class-transformer";
import { CouponRedemptionUpdateManyWithoutUserModelsInput } from "./CouponRedemptionUpdateManyWithoutUserModelsInput";
import { CustomerPreferenceUpdateManyWithoutUserModelsInput } from "./CustomerPreferenceUpdateManyWithoutUserModelsInput";
import { CustomerSubscriptionUpdateManyWithoutUserModelsInput } from "./CustomerSubscriptionUpdateManyWithoutUserModelsInput";
import { ErrorLogUpdateManyWithoutUserModelsInput } from "./ErrorLogUpdateManyWithoutUserModelsInput";
import { FavoriteUpdateManyWithoutUserModelsInput } from "./FavoriteUpdateManyWithoutUserModelsInput";
import { NotificationUpdateManyWithoutUserModelsInput } from "./NotificationUpdateManyWithoutUserModelsInput";
import { NotificationSettingUpdateManyWithoutUserModelsInput } from "./NotificationSettingUpdateManyWithoutUserModelsInput";
import { OrderUpdateManyWithoutUserModelsInput } from "./OrderUpdateManyWithoutUserModelsInput";
import { ReportUpdateManyWithoutUserModelsInput } from "./ReportUpdateManyWithoutUserModelsInput";
import { ReservationUpdateManyWithoutUserModelsInput } from "./ReservationUpdateManyWithoutUserModelsInput";
import { ReviewUpdateManyWithoutUserModelsInput } from "./ReviewUpdateManyWithoutUserModelsInput";
import { RewardUpdateManyWithoutUserModelsInput } from "./RewardUpdateManyWithoutUserModelsInput";
import { SubscriptionUpdateManyWithoutUserModelsInput } from "./SubscriptionUpdateManyWithoutUserModelsInput";
import { TransactionUpdateManyWithoutUserModelsInput } from "./TransactionUpdateManyWithoutUserModelsInput";
import { UserAddressUpdateManyWithoutUserModelsInput } from "./UserAddressUpdateManyWithoutUserModelsInput";
import { WishlistUpdateManyWithoutUserModelsInput } from "./WishlistUpdateManyWithoutUserModelsInput";

@InputType()
class UserModelUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AccessLogUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => AccessLogUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => AccessLogUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  accessLogs?: AccessLogUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  appleSsoToken?: string | null;

  @ApiProperty({
    required: false,
    type: () => CouponRedemptionUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => CouponRedemptionUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => CouponRedemptionUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  couponRedemptions?: CouponRedemptionUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => CustomerPreferenceUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => CustomerPreferenceUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => CustomerPreferenceUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  customerPreferences?: CustomerPreferenceUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => CustomerSubscriptionUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => CustomerSubscriptionUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => CustomerSubscriptionUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  customerSubscriptions?: CustomerSubscriptionUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  emailPassword?: string;

  @ApiProperty({
    required: false,
    type: () => ErrorLogUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => ErrorLogUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => ErrorLogUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  errorLogs?: ErrorLogUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  facebookSsoToken?: string | null;

  @ApiProperty({
    required: false,
    type: () => FavoriteUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => FavoriteUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => FavoriteUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  favorites?: FavoriteUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  googleSsoToken?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: () => NotificationUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => NotificationUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => NotificationUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  notifications?: NotificationUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => NotificationSettingUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => NotificationSettingUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => NotificationSettingUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  notificationSettings?: NotificationSettingUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => OrderUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => OrderUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => OrderUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  orders?: OrderUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber?: string;

  @ApiProperty({
    required: false,
    type: () => ReportUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => ReportUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => ReportUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  reports?: ReportUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => ReservationUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => ReservationUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => ReservationUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  reservations?: ReservationUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => ReviewUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => ReviewUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => ReviewUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  reviews?: ReviewUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => RewardUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => RewardUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => RewardUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  rewards?: RewardUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => SubscriptionUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => SubscriptionUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => SubscriptionUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  subscriptions?: SubscriptionUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => TransactionUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => TransactionUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => TransactionUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  transactions?: TransactionUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  twitterSsoToken?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => UserAddressUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => UserAddressUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => UserAddressUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  userAddresses?: UserAddressUpdateManyWithoutUserModelsInput;

  @ApiProperty({
    required: false,
    type: () => WishlistUpdateManyWithoutUserModelsInput,
  })
  @ValidateNested()
  @Type(() => WishlistUpdateManyWithoutUserModelsInput)
  @IsOptional()
  @Field(() => WishlistUpdateManyWithoutUserModelsInput, {
    nullable: true,
  })
  wishlist?: WishlistUpdateManyWithoutUserModelsInput;
}

export { UserModelUpdateInput as UserModelUpdateInput };
