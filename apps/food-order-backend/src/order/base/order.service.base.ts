/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Order, // @ts-ignore
  OrderItem, // @ts-ignore
  Payment, // @ts-ignore
  Transaction, // @ts-ignore
  Coupon, // @ts-ignore
  PaymentMethod, // @ts-ignore
  Restaurant, // @ts-ignore
  UserAddress, // @ts-ignore
  UserModel,
} from "@prisma/client";

export class OrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.OrderCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderCountArgs>
  ): Promise<number> {
    return this.prisma.order.count(args);
  }

  async orders<T extends Prisma.OrderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderFindManyArgs>
  ): Promise<Order[]> {
    return this.prisma.order.findMany(args);
  }
  async order<T extends Prisma.OrderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderFindUniqueArgs>
  ): Promise<Order | null> {
    return this.prisma.order.findUnique(args);
  }
  async createOrder<T extends Prisma.OrderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderCreateArgs>
  ): Promise<Order> {
    return this.prisma.order.create<T>(args);
  }
  async updateOrder<T extends Prisma.OrderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderUpdateArgs>
  ): Promise<Order> {
    return this.prisma.order.update<T>(args);
  }
  async deleteOrder<T extends Prisma.OrderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderDeleteArgs>
  ): Promise<Order> {
    return this.prisma.order.delete(args);
  }

  async findOrderItems(
    parentId: number,
    args: Prisma.OrderItemFindManyArgs
  ): Promise<OrderItem[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orderItems(args);
  }

  async findPayments(
    parentId: number,
    args: Prisma.PaymentFindManyArgs
  ): Promise<Payment[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async findTransactions(
    parentId: number,
    args: Prisma.TransactionFindManyArgs
  ): Promise<Transaction[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getCoupons(parentId: number): Promise<Coupon | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .coupons();
  }

  async getPaymentMethods(parentId: number): Promise<PaymentMethod | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .paymentMethods();
  }

  async getRestaurants(parentId: number): Promise<Restaurant | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }

  async getUserAddresses(parentId: number): Promise<UserAddress | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .userAddresses();
  }

  async getUserModels(parentId: number): Promise<UserModel | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .userModels();
  }
}
