/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SubscriptionPlan, // @ts-ignore
  CustomerSubscription, // @ts-ignore
  Subscription,
} from "@prisma/client";

export class SubscriptionPlanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SubscriptionPlanCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionPlanCountArgs>
  ): Promise<number> {
    return this.prisma.subscriptionPlan.count(args);
  }

  async subscriptionPlans<T extends Prisma.SubscriptionPlanFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionPlanFindManyArgs>
  ): Promise<SubscriptionPlan[]> {
    return this.prisma.subscriptionPlan.findMany(args);
  }
  async subscriptionPlan<T extends Prisma.SubscriptionPlanFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionPlanFindUniqueArgs>
  ): Promise<SubscriptionPlan | null> {
    return this.prisma.subscriptionPlan.findUnique(args);
  }
  async createSubscriptionPlan<T extends Prisma.SubscriptionPlanCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionPlanCreateArgs>
  ): Promise<SubscriptionPlan> {
    return this.prisma.subscriptionPlan.create<T>(args);
  }
  async updateSubscriptionPlan<T extends Prisma.SubscriptionPlanUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionPlanUpdateArgs>
  ): Promise<SubscriptionPlan> {
    return this.prisma.subscriptionPlan.update<T>(args);
  }
  async deleteSubscriptionPlan<T extends Prisma.SubscriptionPlanDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionPlanDeleteArgs>
  ): Promise<SubscriptionPlan> {
    return this.prisma.subscriptionPlan.delete(args);
  }

  async findCustomerSubscriptions(
    parentId: number,
    args: Prisma.CustomerSubscriptionFindManyArgs
  ): Promise<CustomerSubscription[]> {
    return this.prisma.subscriptionPlan
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customerSubscriptions(args);
  }

  async findSubscriptions(
    parentId: number,
    args: Prisma.SubscriptionFindManyArgs
  ): Promise<Subscription[]> {
    return this.prisma.subscriptionPlan
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subscriptions(args);
  }
}
