/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MenuItemCategory } from "./MenuItemCategory";
import { MenuItemCategoryCountArgs } from "./MenuItemCategoryCountArgs";
import { MenuItemCategoryFindManyArgs } from "./MenuItemCategoryFindManyArgs";
import { MenuItemCategoryFindUniqueArgs } from "./MenuItemCategoryFindUniqueArgs";
import { CreateMenuItemCategoryArgs } from "./CreateMenuItemCategoryArgs";
import { UpdateMenuItemCategoryArgs } from "./UpdateMenuItemCategoryArgs";
import { DeleteMenuItemCategoryArgs } from "./DeleteMenuItemCategoryArgs";
import { MenuItemFindManyArgs } from "../../menuItem/base/MenuItemFindManyArgs";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { MenuItemCategoryService } from "../menuItemCategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MenuItemCategory)
export class MenuItemCategoryResolverBase {
  constructor(
    protected readonly service: MenuItemCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MenuItemCategory",
    action: "read",
    possession: "any",
  })
  async _menuItemCategoriesMeta(
    @graphql.Args() args: MenuItemCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MenuItemCategory])
  @nestAccessControl.UseRoles({
    resource: "MenuItemCategory",
    action: "read",
    possession: "any",
  })
  async menuItemCategories(
    @graphql.Args() args: MenuItemCategoryFindManyArgs
  ): Promise<MenuItemCategory[]> {
    return this.service.menuItemCategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MenuItemCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MenuItemCategory",
    action: "read",
    possession: "own",
  })
  async menuItemCategory(
    @graphql.Args() args: MenuItemCategoryFindUniqueArgs
  ): Promise<MenuItemCategory | null> {
    const result = await this.service.menuItemCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemCategory)
  @nestAccessControl.UseRoles({
    resource: "MenuItemCategory",
    action: "create",
    possession: "any",
  })
  async createMenuItemCategory(
    @graphql.Args() args: CreateMenuItemCategoryArgs
  ): Promise<MenuItemCategory> {
    return await this.service.createMenuItemCategory({
      ...args,
      data: {
        ...args.data,

        menuItemsMenuItemCategoriesMenuItemIdToMenuItems: args.data
          .menuItemsMenuItemCategoriesMenuItemIdToMenuItems
          ? {
              connect:
                args.data.menuItemsMenuItemCategoriesMenuItemIdToMenuItems,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemCategory)
  @nestAccessControl.UseRoles({
    resource: "MenuItemCategory",
    action: "update",
    possession: "any",
  })
  async updateMenuItemCategory(
    @graphql.Args() args: UpdateMenuItemCategoryArgs
  ): Promise<MenuItemCategory | null> {
    try {
      return await this.service.updateMenuItemCategory({
        ...args,
        data: {
          ...args.data,

          menuItemsMenuItemCategoriesMenuItemIdToMenuItems: args.data
            .menuItemsMenuItemCategoriesMenuItemIdToMenuItems
            ? {
                connect:
                  args.data.menuItemsMenuItemCategoriesMenuItemIdToMenuItems,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MenuItemCategory)
  @nestAccessControl.UseRoles({
    resource: "MenuItemCategory",
    action: "delete",
    possession: "any",
  })
  async deleteMenuItemCategory(
    @graphql.Args() args: DeleteMenuItemCategoryArgs
  ): Promise<MenuItemCategory | null> {
    try {
      return await this.service.deleteMenuItemCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItem], {
    name: "menuItemsMenuItemsCategoryIdToMenuItemCategories",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async findMenuItemsMenuItemsCategoryIdToMenuItemCategories(
    @graphql.Parent() parent: MenuItemCategory,
    @graphql.Args() args: MenuItemFindManyArgs
  ): Promise<MenuItem[]> {
    const results =
      await this.service.findMenuItemsMenuItemsCategoryIdToMenuItemCategories(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuItem, {
    nullable: true,
    name: "menuItemsMenuItemCategoriesMenuItemIdToMenuItems",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async getMenuItemsMenuItemCategoriesMenuItemIdToMenuItems(
    @graphql.Parent() parent: MenuItemCategory
  ): Promise<MenuItem | null> {
    const result =
      await this.service.getMenuItemsMenuItemCategoriesMenuItemIdToMenuItems(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }
}
