/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SystemSetting } from "@prisma/client";

export class SystemSettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SystemSettingCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemSettingCountArgs>
  ): Promise<number> {
    return this.prisma.systemSetting.count(args);
  }

  async systemSettings<T extends Prisma.SystemSettingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemSettingFindManyArgs>
  ): Promise<SystemSetting[]> {
    return this.prisma.systemSetting.findMany(args);
  }
  async systemSetting<T extends Prisma.SystemSettingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemSettingFindUniqueArgs>
  ): Promise<SystemSetting | null> {
    return this.prisma.systemSetting.findUnique(args);
  }
  async createSystemSetting<T extends Prisma.SystemSettingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemSettingCreateArgs>
  ): Promise<SystemSetting> {
    return this.prisma.systemSetting.create<T>(args);
  }
  async updateSystemSetting<T extends Prisma.SystemSettingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemSettingUpdateArgs>
  ): Promise<SystemSetting> {
    return this.prisma.systemSetting.update<T>(args);
  }
  async deleteSystemSetting<T extends Prisma.SystemSettingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemSettingDeleteArgs>
  ): Promise<SystemSetting> {
    return this.prisma.systemSetting.delete(args);
  }
}
