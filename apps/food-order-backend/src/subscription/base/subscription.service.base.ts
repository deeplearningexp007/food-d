/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Subscription, // @ts-ignore
  CustomerSubscription, // @ts-ignore
  SubscriptionPlan, // @ts-ignore
  UserModel,
} from "@prisma/client";

export class SubscriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SubscriptionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionCountArgs>
  ): Promise<number> {
    return this.prisma.subscription.count(args);
  }

  async subscriptions<T extends Prisma.SubscriptionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionFindManyArgs>
  ): Promise<Subscription[]> {
    return this.prisma.subscription.findMany(args);
  }
  async subscription<T extends Prisma.SubscriptionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionFindUniqueArgs>
  ): Promise<Subscription | null> {
    return this.prisma.subscription.findUnique(args);
  }
  async createSubscription<T extends Prisma.SubscriptionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionCreateArgs>
  ): Promise<Subscription> {
    return this.prisma.subscription.create<T>(args);
  }
  async updateSubscription<T extends Prisma.SubscriptionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionUpdateArgs>
  ): Promise<Subscription> {
    return this.prisma.subscription.update<T>(args);
  }
  async deleteSubscription<T extends Prisma.SubscriptionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionDeleteArgs>
  ): Promise<Subscription> {
    return this.prisma.subscription.delete(args);
  }

  async findCustomerSubscriptions(
    parentId: number,
    args: Prisma.CustomerSubscriptionFindManyArgs
  ): Promise<CustomerSubscription[]> {
    return this.prisma.subscription
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customerSubscriptions(args);
  }

  async getSubscriptionPlans(
    parentId: number
  ): Promise<SubscriptionPlan | null> {
    return this.prisma.subscription
      .findUnique({
        where: { id: parentId },
      })
      .subscriptionPlans();
  }

  async getUserModels(parentId: number): Promise<UserModel | null> {
    return this.prisma.subscription
      .findUnique({
        where: { id: parentId },
      })
      .userModels();
  }
}
