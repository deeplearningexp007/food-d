/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  IsInt,
  IsNumber,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { ReviewRating } from "../../reviewRating/base/ReviewRating";
import { UserModel } from "../../userModel/base/UserModel";

@ObjectType()
class Review {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  body!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  rating!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => Restaurant,
  })
  @ValidateNested()
  @Type(() => Restaurant)
  @IsOptional()
  restaurants?: Restaurant | null;

  @ApiProperty({
    required: false,
    type: () => [ReviewRating],
  })
  @ValidateNested()
  @Type(() => ReviewRating)
  @IsOptional()
  reviewRatings?: Array<ReviewRating>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  title!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => UserModel,
  })
  @ValidateNested()
  @Type(() => UserModel)
  @IsOptional()
  userModels?: UserModel | null;
}

export { Review as Review };
