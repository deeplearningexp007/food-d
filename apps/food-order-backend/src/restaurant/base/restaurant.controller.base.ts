/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RestaurantService } from "../restaurant.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RestaurantCreateInput } from "./RestaurantCreateInput";
import { Restaurant } from "./Restaurant";
import { RestaurantFindManyArgs } from "./RestaurantFindManyArgs";
import { RestaurantWhereUniqueInput } from "./RestaurantWhereUniqueInput";
import { RestaurantUpdateInput } from "./RestaurantUpdateInput";
import { FavoriteRestaurantFindManyArgs } from "../../favoriteRestaurant/base/FavoriteRestaurantFindManyArgs";
import { FavoriteRestaurant } from "../../favoriteRestaurant/base/FavoriteRestaurant";
import { FavoriteRestaurantWhereUniqueInput } from "../../favoriteRestaurant/base/FavoriteRestaurantWhereUniqueInput";
import { MenuFindManyArgs } from "../../menu/base/MenuFindManyArgs";
import { Menu } from "../../menu/base/Menu";
import { MenuWhereUniqueInput } from "../../menu/base/MenuWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { ReservationWhereUniqueInput } from "../../reservation/base/ReservationWhereUniqueInput";
import { RestaurantDetailFindManyArgs } from "../../restaurantDetail/base/RestaurantDetailFindManyArgs";
import { RestaurantDetail } from "../../restaurantDetail/base/RestaurantDetail";
import { RestaurantDetailWhereUniqueInput } from "../../restaurantDetail/base/RestaurantDetailWhereUniqueInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RestaurantControllerBase {
  constructor(
    protected readonly service: RestaurantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Restaurant })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRestaurant(
    @common.Body() data: RestaurantCreateInput
  ): Promise<Restaurant> {
    return await this.service.createRestaurant({
      data: data,
      select: {
        address: true,
        averageCost: true,
        closingHours: true,
        createdAt: true,
        email: true,
        filterTag: true,
        hashtags: true,
        id: true,
        isActive: true,
        name: true,
        openingHours: true,
        phoneNumber: true,
        shareSlug: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Restaurant] })
  @ApiNestedQuery(RestaurantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurants(@common.Req() request: Request): Promise<Restaurant[]> {
    const args = plainToClass(RestaurantFindManyArgs, request.query);
    return this.service.restaurants({
      ...args,
      select: {
        address: true,
        averageCost: true,
        closingHours: true,
        createdAt: true,
        email: true,
        filterTag: true,
        hashtags: true,
        id: true,
        isActive: true,
        name: true,
        openingHours: true,
        phoneNumber: true,
        shareSlug: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurant(
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Restaurant | null> {
    const result = await this.service.restaurant({
      where: params,
      select: {
        address: true,
        averageCost: true,
        closingHours: true,
        createdAt: true,
        email: true,
        filterTag: true,
        hashtags: true,
        id: true,
        isActive: true,
        name: true,
        openingHours: true,
        phoneNumber: true,
        shareSlug: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() data: RestaurantUpdateInput
  ): Promise<Restaurant | null> {
    try {
      return await this.service.updateRestaurant({
        where: params,
        data: data,
        select: {
          address: true,
          averageCost: true,
          closingHours: true,
          createdAt: true,
          email: true,
          filterTag: true,
          hashtags: true,
          id: true,
          isActive: true,
          name: true,
          openingHours: true,
          phoneNumber: true,
          shareSlug: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Restaurant | null> {
    try {
      return await this.service.deleteRestaurant({
        where: params,
        select: {
          address: true,
          averageCost: true,
          closingHours: true,
          createdAt: true,
          email: true,
          filterTag: true,
          hashtags: true,
          id: true,
          isActive: true,
          name: true,
          openingHours: true,
          phoneNumber: true,
          shareSlug: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/favoriteRestaurants")
  @ApiNestedQuery(FavoriteRestaurantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FavoriteRestaurant",
    action: "read",
    possession: "any",
  })
  async findFavoriteRestaurants(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<FavoriteRestaurant[]> {
    const query = plainToClass(FavoriteRestaurantFindManyArgs, request.query);
    const results = await this.service.findFavoriteRestaurants(params.id, {
      ...query,
      select: {
        createdAt: true,

        favorites: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/favoriteRestaurants")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectFavoriteRestaurants(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: FavoriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteRestaurants: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/favoriteRestaurants")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateFavoriteRestaurants(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: FavoriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteRestaurants: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/favoriteRestaurants")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectFavoriteRestaurants(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: FavoriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteRestaurants: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menus")
  @ApiNestedQuery(MenuFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Menu",
    action: "read",
    possession: "any",
  })
  async findMenus(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Menu[]> {
    const query = plainToClass(MenuFindManyArgs, request.query);
    const results = await this.service.findMenus(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menus")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectMenus(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: MenuWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menus: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menus")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateMenus(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: MenuWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menus: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menus")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectMenus(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: MenuWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menus: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrders(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        coupons: {
          select: {
            id: true,
          },
        },

        deliveryTime: true,
        discountAmount: true,
        finalAmount: true,
        id: true,
        isDelivered: true,
        isPaid: true,
        orderDate: true,
        orderType: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        restaurants: {
          select: {
            id: true,
          },
        },

        scheduledDeliveryTime: true,
        specialInstructions: true,
        status: true,
        totalAmount: true,

        userAddresses: {
          select: {
            id: true,
          },
        },

        userModels: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectOrders(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateOrders(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectOrders(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reservations")
  @ApiNestedQuery(ReservationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Reservation",
    action: "read",
    possession: "any",
  })
  async findReservations(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Reservation[]> {
    const query = plainToClass(ReservationFindManyArgs, request.query);
    const results = await this.service.findReservations(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        partySize: true,
        reservationDate: true,
        reservationTime: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        userModels: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reservations")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectReservations(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reservations")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateReservations(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reservations")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectReservations(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurantDetails")
  @ApiNestedQuery(RestaurantDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "read",
    possession: "any",
  })
  async findRestaurantDetails(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<RestaurantDetail[]> {
    const query = plainToClass(RestaurantDetailFindManyArgs, request.query);
    const results = await this.service.findRestaurantDetails(params.id, {
      ...query,
      select: {
        deliveryCharge: true,
        deliveryTime: true,
        description: true,
        id: true,
        imageUrl: true,
        minOrderValue: true,
        rating: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        reviewCount: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurantDetails")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectRestaurantDetails(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantDetails: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurantDetails")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateRestaurantDetails(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantDetails: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurantDetails")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurantDetails(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantDetails: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reviews")
  @ApiNestedQuery(ReviewFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Review",
    action: "read",
    possession: "any",
  })
  async findReviews(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReviews(params.id, {
      ...query,
      select: {
        body: true,
        createdAt: true,
        id: true,
        rating: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,

        userModels: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectReviews(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateReviews(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectReviews(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
