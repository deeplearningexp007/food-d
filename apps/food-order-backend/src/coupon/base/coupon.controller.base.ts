/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CouponService } from "../coupon.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CouponCreateInput } from "./CouponCreateInput";
import { Coupon } from "./Coupon";
import { CouponFindManyArgs } from "./CouponFindManyArgs";
import { CouponWhereUniqueInput } from "./CouponWhereUniqueInput";
import { CouponUpdateInput } from "./CouponUpdateInput";
import { CouponRedemptionFindManyArgs } from "../../couponRedemption/base/CouponRedemptionFindManyArgs";
import { CouponRedemption } from "../../couponRedemption/base/CouponRedemption";
import { CouponRedemptionWhereUniqueInput } from "../../couponRedemption/base/CouponRedemptionWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CouponControllerBase {
  constructor(
    protected readonly service: CouponService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Coupon })
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCoupon(@common.Body() data: CouponCreateInput): Promise<Coupon> {
    return await this.service.createCoupon({
      data: data,
      select: {
        code: true,
        discountPercentage: true,
        expirationDate: true,
        id: true,
        isActive: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Coupon] })
  @ApiNestedQuery(CouponFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async coupons(@common.Req() request: Request): Promise<Coupon[]> {
    const args = plainToClass(CouponFindManyArgs, request.query);
    return this.service.coupons({
      ...args,
      select: {
        code: true,
        discountPercentage: true,
        expirationDate: true,
        id: true,
        isActive: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Coupon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async coupon(
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<Coupon | null> {
    const result = await this.service.coupon({
      where: params,
      select: {
        code: true,
        discountPercentage: true,
        expirationDate: true,
        id: true,
        isActive: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Coupon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCoupon(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() data: CouponUpdateInput
  ): Promise<Coupon | null> {
    try {
      return await this.service.updateCoupon({
        where: params,
        data: data,
        select: {
          code: true,
          discountPercentage: true,
          expirationDate: true,
          id: true,
          isActive: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Coupon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCoupon(
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<Coupon | null> {
    try {
      return await this.service.deleteCoupon({
        where: params,
        select: {
          code: true,
          discountPercentage: true,
          expirationDate: true,
          id: true,
          isActive: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/couponRedemptions")
  @ApiNestedQuery(CouponRedemptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CouponRedemption",
    action: "read",
    possession: "any",
  })
  async findCouponRedemptions(
    @common.Req() request: Request,
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<CouponRedemption[]> {
    const query = plainToClass(CouponRedemptionFindManyArgs, request.query);
    const results = await this.service.findCouponRedemptions(params.id, {
      ...query,
      select: {
        coupons: {
          select: {
            id: true,
          },
        },

        id: true,
        isRedeemed: true,
        redemptionDate: true,

        userModels: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/couponRedemptions")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async connectCouponRedemptions(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: CouponRedemptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      couponRedemptions: {
        connect: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/couponRedemptions")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async updateCouponRedemptions(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: CouponRedemptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      couponRedemptions: {
        set: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/couponRedemptions")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async disconnectCouponRedemptions(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: CouponRedemptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      couponRedemptions: {
        disconnect: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrders(
    @common.Req() request: Request,
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        coupons: {
          select: {
            id: true,
          },
        },

        deliveryTime: true,
        discountAmount: true,
        finalAmount: true,
        id: true,
        isDelivered: true,
        isPaid: true,
        orderDate: true,
        orderType: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        restaurants: {
          select: {
            id: true,
          },
        },

        scheduledDeliveryTime: true,
        specialInstructions: true,
        status: true,
        totalAmount: true,

        userAddresses: {
          select: {
            id: true,
          },
        },

        userModels: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async connectOrders(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async updateOrders(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async disconnectOrders(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }
}
