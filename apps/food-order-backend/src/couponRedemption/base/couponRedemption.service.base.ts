/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CouponRedemption, // @ts-ignore
  Coupon, // @ts-ignore
  UserModel,
} from "@prisma/client";

export class CouponRedemptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CouponRedemptionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionCountArgs>
  ): Promise<number> {
    return this.prisma.couponRedemption.count(args);
  }

  async couponRedemptions<T extends Prisma.CouponRedemptionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionFindManyArgs>
  ): Promise<CouponRedemption[]> {
    return this.prisma.couponRedemption.findMany(args);
  }
  async couponRedemption<T extends Prisma.CouponRedemptionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionFindUniqueArgs>
  ): Promise<CouponRedemption | null> {
    return this.prisma.couponRedemption.findUnique(args);
  }
  async createCouponRedemption<T extends Prisma.CouponRedemptionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionCreateArgs>
  ): Promise<CouponRedemption> {
    return this.prisma.couponRedemption.create<T>(args);
  }
  async updateCouponRedemption<T extends Prisma.CouponRedemptionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionUpdateArgs>
  ): Promise<CouponRedemption> {
    return this.prisma.couponRedemption.update<T>(args);
  }
  async deleteCouponRedemption<T extends Prisma.CouponRedemptionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionDeleteArgs>
  ): Promise<CouponRedemption> {
    return this.prisma.couponRedemption.delete(args);
  }

  async getCoupons(parentId: number): Promise<Coupon | null> {
    return this.prisma.couponRedemption
      .findUnique({
        where: { id: parentId },
      })
      .coupons();
  }

  async getUserModels(parentId: number): Promise<UserModel | null> {
    return this.prisma.couponRedemption
      .findUnique({
        where: { id: parentId },
      })
      .userModels();
  }
}
